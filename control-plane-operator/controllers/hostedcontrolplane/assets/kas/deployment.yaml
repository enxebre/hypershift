apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    hypershift.openshift.io/managed-by: control-plane-operator
  name: kube-apiserver
  namespace: CONTROL_PLANE_NAMESPACE
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: kube-apiserver
      hypershift.openshift.io/control-plane-component: kube-apiserver
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict-local-volumes: bootstrap-manifests,logs
      labels:
        app: kube-apiserver
        hypershift.openshift.io/control-plane-component: kube-apiserver
        hypershift.openshift.io/request-serving-component: "true"
    spec:
      automountServiceAccountToken: false
      containers:
      - args:
        - -c
        - |
          #!/bin/sh
          while true; do
            if oc apply -f /work; then
              echo "Bootstrap manifests applied successfully."
              break
            fi
            sleep 1
          done
          while true; do
            if oc replace --subresource=status -f /work/99_feature-gate.yaml; then
              echo "FeatureGate status applied successfully."
              break
            fi
            sleep 1
          done
          while true; do
            sleep 1000
          done
        command:
        - /bin/bash
        env:
        - name: KUBECONFIG
          value: /var/secrets/localhost-kubeconfig/kubeconfig
        image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:10666a6dfdf9356fce7ed4759b9fe24bf5bfa6402763e6e3f3c2d576d4627cca
        imagePullPolicy: IfNotPresent
        name: apply-bootstrap
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /work
          name: bootstrap-manifests
        - mountPath: /var/secrets/localhost-kubeconfig
          name: localhost-kubeconfig
      - args:
        - kube-apiserver
        - --openshift-config=/etc/kubernetes/config/config.json
        - --v=2
        - --encryption-provider-config=/etc/kubernetes/secret-encryption/config.yaml
        command:
        - hyperkube
        env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:772922a9ebcb2f53e8520df4c15a44962e7d94c0f380ea36136662253b210813
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: livez?exclude=etcd
            port: client
            scheme: HTTPS
          initialDelaySeconds: 300
          periodSeconds: 180
          successThreshold: 1
          timeoutSeconds: 160
        name: kube-apiserver
        ports:
        - containerPort: 6443
          name: client
          protocol: TCP
        readinessProbe:
          failureThreshold: 18
          httpGet:
            path: readyz
            port: client
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        resources:
          requests:
            cpu: 350m
            memory: 2Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/kubernetes/certs/aggregator-ca
          name: aggregator-ca
        - mountPath: /etc/kubernetes/certs/aggregator
          name: aggregator-crt
        - mountPath: /etc/kubernetes/audit
          name: audit-config
        - mountPath: /etc/kubernetes/auth
          name: auth-config
        - mountPath: /etc/kubernetes/auth-token-webhook
          name: auth-token-webhook-config
        - mountPath: /etc/kubernetes/certs/client-ca
          name: client-ca
        - mountPath: /etc/kubernetes/egress-selector
          name: egress-selector-config
        - mountPath: /etc/kubernetes/certs/etcd-ca
          name: etcd-ca
        - mountPath: /etc/kubernetes/certs/etcd
          name: etcd-client-crt
        - mountPath: /etc/kubernetes/config
          name: kas-config
        - mountPath: /etc/kubernetes/certs/konnectivity-ca
          name: konnectivity-ca
        - mountPath: /etc/kubernetes/certs/konnectivity-client
          name: konnectivity-client
        - mountPath: /etc/kubernetes/certs/kubelet-ca
          name: kubelet-client-ca
        - mountPath: /etc/kubernetes/certs/kubelet
          name: kubelet-client-crt
        - mountPath: /var/log/kube-apiserver
          name: logs
        - mountPath: /etc/kubernetes/oauth
          name: oauth-metadata
        - mountPath: /etc/kubernetes/certs/server
          name: server-crt
        - mountPath: /etc/kubernetes/secrets/svcacct-key
          name: svcacct-key
        - mountPath: /etc/kubernetes/secret-encryption
          name: kas-secret-encryption-config
        workingDir: /var/log/kube-apiserver
      - args:
        - --logtostderr=true
        - --log-file-max-size=0
        - --cluster-cert
        - /etc/konnectivity/cluster/tls.crt
        - --cluster-key
        - /etc/konnectivity/cluster/tls.key
        - --server-cert
        - /etc/konnectivity/server/tls.crt
        - --server-key
        - /etc/konnectivity/server/tls.key
        - --server-ca-cert
        - /etc/konnectivity/ca/ca.crt
        - --server-port
        - "8090"
        - --agent-port
        - "8091"
        - --health-port
        - "2041"
        - --admin-port=8093
        - --mode=http-connect
        - --proxy-strategies=destHost,defaultRoute
        - --keepalive-time
        - 30s
        - --frontend-keepalive-time
        - 30s
        - --server-count
        - "1"
        - --cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        command:
        - /usr/bin/proxy-server
        image: KONECTIVITY_IMAGE
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - sleep 70
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: healthz
            port: 2041
            scheme: HTTP
          initialDelaySeconds: 120
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 30
        name: konnectivity-server
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: healthz
            port: 2041
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/konnectivity/cluster
          name: cluster-certs
        - mountPath: /etc/konnectivity/ca
          name: konnectivity-ca
        - mountPath: /etc/konnectivity/server
          name: server-certs
      - args:
        - -c
        - "\nset -o errexit\nset -o nounset\nset -o pipefail\n\nfunction cleanup()
          {\n\tkill -- -$$\n\twait\n}\ntrap cleanup SIGTERM\n\n/usr/bin/tail -c+1
          -F /var/log/kube-apiserver/audit.log &\nwait $!\n"
        command:
        - /bin/bash
        image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:10666a6dfdf9356fce7ed4759b9fe24bf5bfa6402763e6e3f3c2d576d4627cca
        imagePullPolicy: IfNotPresent
        name: CLI_IMAGE
        resources:
          requests:
            cpu: 5m
            memory: 10Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/log/kube-apiserver
          name: logs
      - command:
        - /usr/bin/aws-pod-identity-webhook
        - --annotation-prefix=eks.amazonaws.com
        - --in-cluster=false
        - --kubeconfig=/var/run/app/kubeconfig/kubeconfig
        - --logtostderr
        - --port=4443
        - --aws-default-region=us-east-1
        - --tls-cert=/var/run/app/certs/tls.crt
        - --tls-key=/var/run/app/certs/tls.key
        - --token-audience=openshift
        image: AWS_POD_IDENTITY_WEBHOOK_IMAGE
        imagePullPolicy: IfNotPresent
        name: aws-pod-identity-webhook
        resources:
          requests:
            cpu: 10m
            memory: 25Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /var/run/app/certs
          name: aws-pod-identity-webhook-serving-certs
        - mountPath: /var/run/app/kubeconfig
          name: aws-pod-identity-webhook-kubeconfig
      dnsPolicy: ClusterFirst
      initContainers:
      - args:
        - -c
        - |
          #!/bin/sh
          cd /tmp
          mkdir input output manifests

          touch /tmp/manifests/99_feature-gate.yaml
          cat <<EOF >/tmp/manifests/99_feature-gate.yaml
          apiVersion: config.openshift.io/v1
          kind: FeatureGate
          metadata:
            creationTimestamp: null
            name: cluster
          spec: {}
          status:
            featureGates: null

          EOF

          /usr/bin/render \
             --asset-output-dir /tmp/output \
             --rendered-manifest-dir=/tmp/manifests \
             --cluster-profile=ibm-cloud-managed \
             --payload-version=4.17.0-rc.0
          cp /tmp/output/manifests/* /work
          cp /tmp/manifests/* /work
        command:
        - /bin/bash
        image: CLUSTER_CONFIG_OPERATOR_IMAGE
        imagePullPolicy: IfNotPresent
        name: init-bootstrap
        resources:
          requests:
            cpu: 30m
            memory: 50Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /work
          name: bootstrap-manifests
      - args:
        - -c
        - |
          #!/bin/sh
          while ! nslookup etcd-client.agarcial-agarcial-management.svc; do sleep 1; done
        command:
        - /bin/bash
        image: quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:10666a6dfdf9356fce7ed4759b9fe24bf5bfa6402763e6e3f3c2d576d4627cca
        imagePullPolicy: IfNotPresent
        name: CLI_IMAGE
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      priorityClassName: hypershift-api-critical
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 95
      volumes:
      - emptyDir: {}
        name: bootstrap-manifests
      - name: localhost-kubeconfig
        secret:
          defaultMode: 416
          secretName: localhost-kubeconfig
      - emptyDir: {}
        name: logs
      - configMap:
          defaultMode: 420
          name: kas-config
        name: kas-config
      - configMap:
          defaultMode: 420
          name: auth-config
        name: auth-config
      - configMap:
          defaultMode: 420
          name: kas-audit-config
        name: audit-config
      - configMap:
          defaultMode: 416
          name: konnectivity-ca-bundle
        name: konnectivity-ca
      - name: server-crt
        secret:
          defaultMode: 416
          secretName: kas-server-crt
      - name: aggregator-crt
        secret:
          defaultMode: 416
          secretName: kas-aggregator-crt
      - configMap:
          defaultMode: 420
          name: aggregator-client-ca
        name: aggregator-ca
      - name: svcacct-key
        secret:
          defaultMode: 416
          secretName: sa-signing-key
      - configMap:
          defaultMode: 420
          name: etcd-ca
        name: etcd-ca
      - name: etcd-client-crt
        secret:
          defaultMode: 416
          secretName: etcd-client-tls
      - configMap:
          defaultMode: 420
          name: oauth-metadata
        name: oauth-metadata
      - name: auth-token-webhook-config
        secret:
          defaultMode: 416
          secretName: kas-authentication-token-webhook-config
      - configMap:
          defaultMode: 420
          name: client-ca
        name: client-ca
      - name: kubelet-client-crt
        secret:
          defaultMode: 416
          secretName: kas-kubelet-client-crt
      - configMap:
          defaultMode: 420
          name: client-ca
        name: kubelet-client-ca
      - name: konnectivity-client
        secret:
          defaultMode: 416
          secretName: konnectivity-client
      - configMap:
          defaultMode: 420
          name: kas-egress-selector-config
        name: egress-selector-config
      - name: kubeconfig
        secret:
          defaultMode: 416
          secretName: localhost-kubeconfig
      - name: server-certs
        secret:
          defaultMode: 416
          secretName: konnectivity-server
      - name: cluster-certs
        secret:
          defaultMode: 416
          secretName: konnectivity-cluster
      - name: aws-pod-identity-webhook-serving-certs
        secret:
          defaultMode: 420
          secretName: aws-pod-identity-webhook-serving-cert
      - name: aws-pod-identity-webhook-kubeconfig
        secret:
          defaultMode: 420
          secretName: aws-pod-identity-webhook-kubeconfig
      - name: kas-secret-encryption-config
        secret:
          defaultMode: 420
          secretName: kas-secret-encryption-config
